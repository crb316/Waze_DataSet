# Import packages for data manipulation
import pandas as pd 
import numpy as np
# Load dataset into dataframe
df = pd.read_csv('waze_dataset.csv')
# Browsing first 10 entries 
df.head(10)
#exploring data types, columns, and data informtation 
df.info()
# Isolating rows with null values
null_df = df[df['label'].isnull()]
#displaying summary statistics of rows with null values
null_df.describe()
# Isolating rows without null values
not_null_df = df[~df['label'].isnull()]
# Displaying summary stats of rows without null values
not_null_df.describe()
# Getting count of null values by device
null_df['device'].value_counts()
# Calculate % of iPhone nulls and Android nulls
null_df['device'].value_counts(normalize=True)
# Calculate % of iPhone users and Android users in full dataset
null_df['device'].value_counts(normalize=True)
# Calculate counts of churned vs. retained
print(df['label'].value_counts())
print()
print(df['label'].value_counts(normalize=True))
# Calculate median values of all columns for churned and retained users
df.groupby('label').median(numeric_only=True)
# Add a column to df called `km_per_drive`
df['km_per_drive'] = df['driven_km_drives'] / df['drives']
# Group by `label`, calculate the median, and isolate for km per drive
median_km_per_drive = df.groupby('label').median(numeric_only=True)[['km_per_drive']]
median_km_per_drive
# Add a column to df called `km_per_driving_day`
df['km_per_driving_day'] = df['driven_km_drives'] / df['driving_days']
# Group by `label`, calculate the median, and isolate for km per driving day
median_km_per_driving_day = df.groupby('label').median(numeric_only=True)[['km_per_driving_day']]
median_km_per_driving_day
# Add a column to df called `drives_per_driving_day`
df['drives_per_driving_day'] = df['drives'] / df['driving_days']
# Group by `label`, calculate the median, and isolate for drives per driving day
median_drives_per_driving_day = df.groupby('label').median(numeric_only=True)[['drives_per_driving_day']]
median_drives_per_driving_day
# For each label, calculate the number of Android users and iPhone users
df.groupby(['label', 'device']).size()
# For each label, calculate the percentage of Android users and iPhone users
df.groupby('label')['device'].value_counts(normalize=True)
